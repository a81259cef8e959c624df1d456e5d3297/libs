name: CI Workflow
on:
  # Trigger the workflow on push events to the 'main' branch
  push:


permissions:
  # Grant write permissions for repository content
  contents: write

# Allow cancellation of in-progress runs for the same workflow group
concurrency:
  group: "${{ github.workflow }} @ ${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      # Step 1: Checkout Repository
      - name: üõ† Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Build the 'xhide' binary
      - name: üî® Build 'xhide' Binary
        run: |
          echo "üöÄ Starting build process..."
          tmp_dir=$(mktemp -d)
          mkdir -p upload
          gcc scripts/xhide.c -Os -o upload/xhide
          if [ $? -eq 0 ]; then
            echo "‚úÖ Build successful!"
          else
            echo "‚ùå Build failed!"
            exit 1
          fi
          echo "TAG_NAME=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
          echo "‚ú® Binary created and stored in 'upload' directory."

      # Step 3: Create and upload a timestamped release
      - name: üì¶ Upload Release Artifact with Timestamp
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          body: |
            **Commit SHA**: ${{ github.sha }}
            **Build Date**: ${{ env.TAG_NAME }}
          files: |
            upload/*
        continue-on-error: false

      # Step 4: Create and upload a 'latest' tagged release
      - name: üè∑ Upload 'Latest' Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          tag_name: latest
          body: |
            **Commit SHA**: ${{ github.sha }}
            **Release Type**: Latest Release
          files: |
            upload/*
        continue-on-error: false

      # Step 5: Cleanup old releases, keeping the latest 5
      - name: üßπ Cleanup Old Releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          keep_latest: 5
          delete_tags: true
        continue-on-error: false
        run: echo "üóë Successfully cleaned up old releases, retaining the latest 5!"