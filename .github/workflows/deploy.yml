name: 🌟 CI Workflow

on:
  # Trigger the workflow on a push to the main branch
  push:
    branches:
      - main

permissions:
  # Provide write permissions for repository content
  contents: write

# Allow cancellation of in-progress runs for the same group of workflows
concurrency:
  group: "${{ github.workflow }} @ ${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  build-and-release:
    # Use the latest Ubuntu virtual environment
    runs-on: ubuntu-latest
    # Set timeout to avoid infinite running of workflow
    timeout-minutes: 5

    steps:
      # Step 1: Checkout repository code
      - name: ⤵️ Checkout Repository
        uses: actions/checkout@v3
        with:
          # Pull a shallow copy of the repository
          fetch-depth: 1

      # Step 2: Build the xhide binary
      - name: 🛠️ Build xhide Binary
        run: |
          echo "🔧 Starting xhide build process..."
          tmp_dir=$(mktemp -d) # Temporary directory for build
          mkdir -p upload # Ensure upload directory exists
          gcc scripts/xhide.c -Os -o upload/xhide
          echo "🎉 xhide build completed successfully!"
          # Generate a timestamped tag name
          echo "TAG_NAME=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      # Step 3: Create and upload a timestamped release
      - name: 🚀 Publish Timestamped Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          body: "📝 Auto-generated Timestamped Release\nCommit SHA: ${{ github.sha }}"
          files: |
            upload/*
        continue-on-error: false
        if: success()

      # Step 4: Create and upload the latest release tag
      - name: 🌐 Publish 'Latest' Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          tag_name: latest
          body: "📝 Auto-generated 'Latest' Release\nCommit SHA: ${{ github.sha }}"
          files: |
            upload/*
        continue-on-error: false

      # Step 5: Cleanup old releases, keeping only the 5 latest
      - name: 🗑️ Cleanup Old Releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          keep_latest: 5 # Retain the 5 most recent releases
          delete_tags: true # Delete tags associated with old releases